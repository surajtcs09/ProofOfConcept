/*
 * TreeSet is used to keep the data in natural order by default. 
 * If we want to store any object in treeset which has many attributes, then we need to implement the Comparable interface by that 
 * object and also need to implement compareTo() based on our needs
 * In compareTo() method of Comparable interface, this is used to represent current class object and it is used first 
 * thereafter another class object is compared
 * if(this.age>emp.age)    ||    this.firstName.compareTo(emp.firstName)
 * if this order is reversed, ordering of the object will be reversed in the treeset
 * So, be careful on that. 
 * Also, this compareTo() returns integer value, write 1 if current object value is greater than compared object, 
 * -1 if lesser and 0 if equal
 * 
 * If this Comparable interface is not implemented, and compareTo() is not overridden then Comparator used in TreeMap used to sort 
 * will throw ClassCastException
 "Exception in thread "main" java.lang.ClassCastException: learn.collection.Employee2 cannot be cast to java.lang.Comparable"
 
 Following is the flow of it. 
 Step1: add object in TreeSet
 	employeeSet.add(emp1);
 Step2:  call add() method of TreeSet
   /**
     * Add
     s the specified element to this set if it is not already present.
     * More formally, adds the specified element {@code e} to this set if
     * the set contains no element {@code e2} such that
     * <tt>(e==null&nbsp;?&nbsp;e2==null&nbsp;:&nbsp;e.equals(e2))</tt>.
     * If this set already contains the element, the call leaves the set
     * unchanged and returns {@code false}.
     *
     * @param e element to be added to this set
     * @return {@code true} if this set did not already contain the specified
     *         element
     * @throws ClassCastException if the specified object cannot be compared
     *         with the elements currently in this set
     * @throws NullPointerException if the specified element is null
     *         and this set uses natural ordering, or its comparator
     *         does not permit null elements
     */
    public boolean add(E e) {
        return m.put(e, PRESENT)==null;
    }
    
   Step3: call the put() method of TreeMap,
   Here, Comparator compares the value and if teh specified keys cannot be compared with the keys currently 
   in the map, then it will throw ClassCastException
   
       /**
     * Associates the specified value with the specified key in this map.
     * If the map previously contained a mapping for the key, the old
     * value is replaced.
     *
     * @param key key with which the specified value is to be associated
     * @param value value to be associated with the specified key
     *
     * @return the previous value associated with {@code key}, or
     *         {@code null} if there was no mapping for {@code key}.
     *         (A {@code null} return can also indicate that the map
     *         previously associated {@code null} with {@code key}.)
     * @throws ClassCastException if the specified key cannot be compared
     *         with the keys currently in the map
     * @throws NullPointerException if the specified key is null
     *         and this map uses natural ordering, or its comparator
     *         does not permit null keys
     */
    public V put(K key, V value) {
        Entry<K,V> t = root;
        if (t == null) {
            compare(key, key); // type (and possibly null) check

            root = new Entry<>(key, value, null);
            size = 1;
            modCount++;
            return null;
        }
        int cmp;
        Entry<K,V> parent;
        // split comparator and comparable paths
        Comparator<? super K> cpr = comparator;
        if (cpr != null) {
            do {
                parent = t;
                cmp = cpr.compare(key, t.key);
                if (cmp < 0)
                    t = t.left;
                else if (cmp > 0)
                    t = t.right;
                else
                    return t.setValue(value);
            } while (t != null);
        }
        else {
            if (key == null)
                throw new NullPointerException();
            @SuppressWarnings("unchecked")
                Comparable<? super K> k = (Comparable<? super K>) key;
            do {
                parent = t;
                cmp = k.compareTo(t.key);
                if (cmp < 0)
                    t = t.left;
                else if (cmp > 0)
                    t = t.right;
                else
                    return t.setValue(value);
            } while (t != null);
        }
        Entry<K,V> e = new Entry<>(key, value, parent);
        if (cmp < 0)
            parent.left = e;
        else
            parent.right = e;
        fixAfterInsertion(e);
        size++;
        modCount++;
        return null;
    }

 */
 
 Step 4:
 /**
     * Compares two keys using the correct comparison method for this TreeMap.
     * The comparator used to maintain order in this tree map, or null if it uses the natural ordering of its keys.
     */
    @SuppressWarnings("unchecked")
    final int compare(Object k1, Object k2) {
        return comparator==null ? ((Comparable<? super K>)k1).compareTo((K)k2)
            : comparator.compare((K)k1, (K)k2);
    }
*
*
*/

/*********************************************************************************
 *********************************************************************************
 *******************************   Case 1 ****************************************
 *************** We can modify the Employee object and implment Comparable here **
 *********************************************************************************
 */

package learn.collection;

public class Employee implements Comparable{
	private String firstName;
	private String lastName;
	private int age;
	private String department;
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public int getAge() {
		return age;
	}
	public void setAge(int age) {
		this.age = age;
	}
	public String getDepartment() {
		return department;
	}
	public void setDepartment(String department) {
		this.department = department;
	}
	@Override
	public int compareTo(Object o) {
		Employee emp = (Employee) o;
	    /*
	     * To sort the object based on age in ascending order 
	     * if(this.age>emp.age){
	    	return 1;
	    }else if(this.age==emp.age){
	    	return 0;
	    }else{
	    	return -1;
	    }*/
      // ** ************* Note
      // if the data member need to be compared is number, then just write
      //  return this.age-emp.age;
      // This one line code is very simple and elegant as it does not matter you return -1 or 0 or +1
      // Here, you need to provide positive, zero or negative value returned to caller of compareTo()
      // One thing to make sure that integers to be compared are positive value and ar
		
		/*
		 * To sort the object based on first name in ascending order
		 */
		/*
    * int compare= this.firstName.compareTo(emp.firstName);
		if(compare>0)
			return 1;
		else if(compare<0)
			return -1;
		else
			return 0;
      */
      return this.firstName.compareTo(emp.firstName);
	}
	
}


// Main Class
package learn.collection;

import java.util.Set;
import java.util.TreeSet;

public class CompareData {
		public static void main(String[] args){
			Set<Employee> employeeSet= new TreeSet<>();
			Employee emp1= new Employee();
			emp1.setAge(20);
			emp1.setDepartment("D1");
			emp1.setFirstName("Suraj");
			emp1.setLastName("Kumar");
			
			employeeSet.add(emp1);
			
			Employee emp5= new Employee();
			emp5.setAge(25);
			emp5.setDepartment("DA");
			emp5.setFirstName("Suraj5");
			emp5.setLastName("Kumar5");
			
			employeeSet.add(emp5);
			
			Employee emp2= new Employee();
			emp2.setAge(15);
			emp2.setDepartment("Dx");
			emp2.setFirstName("Suraj2");
			emp2.setLastName("Kumar2");
			employeeSet.add(emp2);
			int i=0;
			for(Employee emp: employeeSet){
				System.out.println(i++);
				System.out.println(emp.getFirstName()+" "+emp.getLastName()+
						" "+emp.getDepartment()+" "+emp.getAge());
				
			}
		}
}

/*********************************************************************************
 *********************************************************************************
 *******************************   Case 2****************************************
 *************** what if we can't modify the Employee object ***********************************
 ********** Here we need to use Comparator interface. For that,create a class implementing Comparator and then pass that object
 as an argument to the constructor of TreeSet while creating the object.
 Here, we are making changes in implementation class, only
 *********************************************************************************
 *********************************************************************************
 */
Code: 
// First we need to create a enum of fields of class object, so that sorting can be done as per the requirement
// and we don't need to create different class implementing Comparator
// Suppose, now the business logic is to sort using firstName
// Next time, business logic is to sort using age, Here use of enum is must to solve this. 
package learn.collection;
public enum EmployeeDataType {
	AGE
	, DEPARTMENT
	, FIRSTNAME 
	, LASTNAME;

};

// Employee2 class 
package learn.collection;
public class Employee2 {
	private String firstName;
	private String lastName;
	private int age;
	private String department;
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public int getAge() {
		return age;
	}
	public void setAge(int age) {
		this.age = age;
	}
	public String getDepartment() {
		return department;
	}
	public void setDepartment(String department) {
		this.department = department;
	}
	
}

// Business logic to implement sorting using Comparator
package learn.collection;

import java.util.Comparator;
import java.util.Set;
import java.util.TreeSet;

class EmployeeDataTypeCompare implements Comparator<Employee2>{
	EmployeeDataType type;
	public EmployeeDataTypeCompare(EmployeeDataType type){
		this.type=type;
	}
	@Override
	public int compare(Employee2 o1, Employee2 o2) {
		/*Beauty of Java Enum
		If we provide the enum as expression in switch, 
		then java automatically infers those enum constants in case. 
		We need to just call these constants without the use of Enum
		If we try to call these constants using enum, then it gives compile time
		error: "The qualified case label EmployeeDataType.AGE must be replaced with the unqualified enum constant AGE"
		*This has been restricted in java because of two reasons
		* Reason1: If there is no restriction, then we can call constant of any other enum which will never match 
		* to the provided enum in the switch(expression)
		*  Reason2: As deduced from reason1, there is no point in calling it with enum it become fixed number of 
		*  constants that can only be called
		*  
		*/
		switch(type){
		case AGE:
			return o1.getAge()-o2.getAge();
		case DEPARTMENT:
			return o1.getDepartment().compareTo(o2.getDepartment());
		case FIRSTNAME:
			return o1.getFirstName().compareTo(o2.getFirstName());
		case LASTNAME:
			return o1.getLastName().compareTo(o2.getLastName());
		default:
			return 0;
		}
	}
	
}
public class CompareData2 {
	
	public static void main(String[] args){
		/*
		 * Here, the object of EmployeeDataTypeCompare is passed as argument of TreeSet
		 * which provides it the logic to compare Employee object 
		 */
		Set<Employee2> employeeSet= new TreeSet<>(new EmployeeDataTypeCompare(EmployeeDataType.LASTNAME));
		Employee2 emp1= new Employee2();
		emp1.setAge(20);
		emp1.setDepartment("D1");
		emp1.setFirstName("Suraj");
		emp1.setLastName("Kumar");
		
		employeeSet.add(emp1);
		
		Employee2 emp5= new Employee2();
		emp5.setAge(25);
		emp5.setDepartment("DA");
		emp5.setFirstName("Suraj5");
		emp5.setLastName("Kumar5");
		
		employeeSet.add(emp5);
		
		Employee2 emp2= new Employee2();
		emp2.setAge(15);
		emp2.setDepartment("Dx");
		emp2.setFirstName("Suraj2");
		emp2.setLastName("Kumar2");
		employeeSet.add(emp2);
		
		int i=0;
		for(Employee2 emp: employeeSet){
			System.out.println(i++);
			System.out.println(emp.getFirstName()+" "+emp.getLastName()+
					" "+emp.getDepartment()+" "+emp.getAge());
			
		}
	}
}


