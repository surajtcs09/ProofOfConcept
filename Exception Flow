1. Exception flow in multithreading
If there are two threads: Main thread and child thread. 
And, if exception occurred in child thread, then child thread execution stops there, but main thread execution 
continues.

package org.learn.multithreading;

public class Thread2 implements Runnable {

	@Override
	public void run() {
		System.out.println("run");
		throw new RuntimeException("Problem");
		//System.out.println("Unreachable code");
				
	}
	public static void main(String[] args){
		Thread thread = new Thread(new Thread2());
		thread.start();
		System.out.println("Main method in between");
		try {
			Thread.sleep(2000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		System.out.println("End of method");
	}
	
}


In above program, exception occurred in child thread which includes run(). 
Even if the exception occurred in child method, main thread is not interrupted, then 
this program will surely print "End of method".
